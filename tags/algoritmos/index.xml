<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Diário de Bordo – algoritmos</title><link>https://sandrorgguimaraes.github.io/tags/algoritmos/</link><description>Recent content in algoritmos on Diário de Bordo</description><generator>Hugo -- gohugo.io</generator><language>pt-br</language><lastBuildDate>Fri, 25 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://sandrorgguimaraes.github.io/tags/algoritmos/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog: Dicas</title><link>https://sandrorgguimaraes.github.io/blog/desenvolvimento/dicas/</link><pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate><guid>https://sandrorgguimaraes.github.io/blog/desenvolvimento/dicas/</guid><description>
&lt;hr>
&lt;h2 id="how-to-reduce-the-time-complexity-of-nested-loopshttpsdevtoleandronsphow-to-reduce-the-time-complexity-of-nested-loops-1lkd">&lt;a href="https://dev.to/leandronsp/how-to-reduce-the-time-complexity-of-nested-loops-1lkd" target="_blank" rel="noopener">How to reduce the time complexity of nested loops&lt;/a>
&lt;/h2>
&lt;p>por &lt;a href="https://sandrorgguimaraes.github.io/autores/leandro-proen%c3%a7a/">&lt;strong>Leandro Proença&lt;/strong>&lt;/a>
em 04/12/2021.&lt;/p>
&lt;p>Palavras do autor:&lt;/p>
&lt;blockquote>
&lt;p>Neste post vou demonstrar uma forma de entender, analisar e reduzir a complexidade de tempo em algoritmos, especialmente em loops aninhados .&lt;/p>
&lt;p>Os exemplos usarão Ruby, mas podem ser traduzidos para qualquer linguagem de programação.&lt;/p>
&lt;/blockquote>
&lt;hr></description></item></channel></rss>